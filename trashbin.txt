ENV PYTHONUNBUFFERED 1
 
image: python:3.6
 
path
 
    @route('/', method='POST')

 
SQL = 'INSERT INTO email (assunto,mensagem) VALUES (%s, %s)'
 
conn.close()

 
conn = psycopg2.connect(DSN)
 
DSN = "dbname=email_sender user=postgres password=password host=db"
 
()
 
route, run,
 
serviceName
 
networkName
 
containerPath:ro
 
imageName
 
password=password
 
dbNAME
 
serviceName
 
/ {
 
    ports:
      - 8080:8080
 
apt-get update && apt-get install -y vim
 
self.register_message(assunto, mensagem)
 
self
 
serviceName
 
Aplicação
 
      # Volume dos dados

 
      # Scripts

 
sender.
 
    sender = Sender()

 
def __init__(self):
        super().__init__()
        self.route('/', method='POST', callback=self.send)
        
        redis_host = os.getenv('REDIS_HOST', 'queue')
        self.fila = redis.StrictRedis(host=redis_host, port=6379, db=0)

        db_host = os.getenv('DB_HOST', 'db')
        db_user = os.getenv('DB_USER', 'postgres')
        db_name = os.getenv('DB_NAME', 'sender')
        dsn = f'dbname={db_name} user={db_user} host={db_host}'
        self.conn = psycopg2.connect(dsn)
        
    def register_message(self, assunto, mensagem):
        SQL = 'INSERT INTO emails (assunto, mensagem) VALUES (%s, %s)'
        cur = self.conn.cursor()
        cur.execute(SQL, (assunto, mensagem))
        self.conn.commit()
        cur.close()

        msg = {'assunto': assunto, 'mensagem': mensagem}
        self.fila.rpush('sender', json.dumps(msg))

        print('Mensagem registrada !')

 
Bottle
 
import psycopg2
import redis
import json
import os
 
networks:
  banco:
  web:
  fila:
 
    networks:
      - banco
 
 # Configuração do proxy reverso
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
 
POSTGRES_HOST_AUTH_METHOD=trust
 
version: '3'
volumes:
  dados:
networks:
  banco:
  web:
  fila:
services:
  db:
    image: postgres:9.6
    volumes:
      # Volume dos dados
      - dados:/var/lib/postgresql/data
      # Scripts
      - ./scripts:/scripts
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    
    networks:
      - banco
  frontend:
  #site
    image:  nginx:latest
    volumes:
      # Site
      - ./web:/usr/share/nginx/html/
      # Configuração do proxy reverso
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 80:80
    networks:
      - web
    depends_on:
      - app
  app:
    image: python:3.6
    volumes:
      # Aplicação
      - ./app:/app
    working_dir: /app
    command: bash ./app.sh
    networks:
      - banco
      - web
      - fila
    depends_on:
      - db
      - queue
    environment:
      - DB_NAME=abc_sender
  queue:
    image: redis:3.2
    networks:
      - fila
  worker:
    build: worker
    volumes:
      # Worker
      - ./worker:/worker
    working_dir: /worker
    command: worker.py
    networks:
      - fila
    depends_on:
      - queue

 
environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
 
FROM python:3.6
LABEL maintainer 'Aluno Cod3r <aluno at cod3r.com.br>'

ENV PYTHONUNBUFFERED 1
RUN pip install redis==2.10.5

ENTRYPOINT ["/usr/local/bin/python"]
 
version: '3'
volumes:
  dados:
networks:
  banco:
  web:
  fila:
services:
  db:
    image: postgres:9.6
    volumes:
      # Volume dos dados
      - dados:/var/lib/postgresql/data
      # Scripts
      - ./scripts:/scripts
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - banco
  frontend:
    image: nginx:1.13
    volumes:
      # Site
      - ./web:/usr/share/nginx/html/
      # Configuração do proxy reverso
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 80:80
    networks:
      - web
    depends_on:
      - app
  app:
    image: python:3.6
    volumes:
      # Aplicação
      - ./app:/app
    working_dir: /app
    command: bash ./app.sh
    networks:
      - banco
      - web
      - fila
    depends_on:
      - db
      - queue
    environment:
      - DB_NAME=abc_sender
  queue:
    image: redis:3.2
    networks:
      - fila
  worker:
    build: worker
    volumes:
      # Worker
      - ./worker:/worker
    working_dir: /worker
    command: worker.py
    networks:
      - fila
    depends_on:
      - queue
 
environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
 
    volumes:
      - ./web:/usr/share/nginx/html/
    ports:
      - 80:80
 
build:
      context: .
      dockerfile: Dockerfile
 
- ./nginx.conf:/etc/nginx/nginx.conf
 
1.13
 
   working_dir: /web
 
image: nginx:1.13
 
    command: bash 

 
command
 
8080" method="POST">
            <div>
                <label for="assunto">Assunto</label>
                <input type="text" name="assunto">
            </div>

            <div>
                <label for="mensagem">Mensagem</label>
                <textarea name="mensagem" cols="50" rows="6"></textarea>
            </div>

            <div>
                <button>Enviar !</button>
            </div>
        </form>
    </body>
</html>
 
http://localhost/api
 
assunto
 
mensagem
 
mensagem
 
environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
 
Frontend
 
Client
 
(bodyParser.json()
 
node-rest
 
const mongoose = require('mongoose')
 
imageName
 
imageName
 
version
 
